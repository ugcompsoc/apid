name: Deploy to environment

on:
  workflow_call:
    inputs:
      tag_name:
        description: "Provide the tag you wish to deploy"
        type: string
        required: true
      environment:
        type: string
        description: "Provide the environment you would like the image to be deployed on, e.g. DEV, TEST or PROD"
        required: true
        default: DEV
    secrets:
      SSH_HOST:
        description: "Provide the FQDN or IP address of the server to deploy on"
        required: true
      SSH_USERNAME:
        description: "Provide the username to login with"
        required: true
      SSH_SECRET:
        description: "Provide the private SSH key to login with"
        required: true
      SSH_PORT:
        description: "Provide the SSH port"
        required: true
      MONGO_DATABASE_NAME:
        description: "Provide the FQDN (inclusive of protocol definition) for the DB"
        required: true
      MONGO_ROOT_USERNAME:
        description: "Provide the username that has read/write access to db"
        required: true
      MONGO_ROOT_PASSWORD:
        description: "Provide the password for that user"
        required: true

jobs:
  get-url:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      url: ${{ steps.url.outputs.url }}
    steps:
      - name: Get API URL
        id: url
        shell: bash
        run: |
          echo "##[set-output name=url;]$(echo ${{ inputs.tag_name}}.dev.apid.testbox.compsoc.ie)" || true
          [ ${{ inputs.environment }} = "TEST" ] && echo "##[set-output name=url;]$(echo dev.apid.testbox.compsoc.ie)" || true
          [ ${{ inputs.environment }} = "PROD" ] && echo "##[set-output name=url;]$(echo apid.testbox.compsoc.ie)" || true
  deployment:
    needs: [get-url]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy To environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_SECRET }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            STRIPPED_TAG_NAME=$(echo "${{ inputs.tag_name }}" | sed -e 's#/#\-#g' -e 's#\.#\-#g')

            docker network create private-ugcompsoc_apid_${STRIPPED_TAG_NAME}

            mkdir /opt/ugcompsoc_apid/${STRIPPED_TAG_NAME}
            cd /opt/ugcompsoc_apid/${STRIPPED_TAG_NAME}

            HOST=\`
            HOST=${HOST}${{ needs.get-url.outputs.url }}
            HOST=${HOST}\`

            tee docker-compose.yml << END
            version: '3'
            services: 
              ugcompsoc_apid_${STRIPPED_TAG_NAME}:
                image: ugcompsoc/apid:${{ inputs.tag_name }}
                container_name: ugcompsoc_apid_${STRIPPED_TAG_NAME}
                labels:
                  - "traefik.default.protocol=http"
                  - "traefik.docker.network=transit-public"
                  - "traefik.enable=true"
                  - "traefik.http.routers.ugcompsoc_apid_${STRIPPED_TAG_NAME}.rule=Host(${HOST})"
                  - "traefik.http.routers.ugcompsoc_apid_${STRIPPED_TAG_NAME}.entrypoints=websecure"
                  - "traefik.http.routers.ugcompsoc_apid_${STRIPPED_TAG_NAME}.tls=true"
                  - "traefik.http.routers.ugcompsoc_apid_${STRIPPED_TAG_NAME}.tls.certresolver=myresolver"
                  - "traefik.http.services.ugcompsoc_apid_${STRIPPED_TAG_NAME}.loadbalancer.server.port=8080"
                  - "traefik.port=80"
                depends_on:
                  - "ugcompsoc_apid_${STRIPPED_TAG_NAME}_db"
                restart: unless-stopped
                volumes:
                  - ./apid.yml:/run/config/apid.yml:ro
                networks:
                  - transit-public
                  - private-ugcompsoc_apid_${STRIPPED_TAG_NAME}
              ugcompsoc_apid_${STRIPPED_TAG_NAME}_db:
                image: mongo:6-jammy
                container_name: ugcompsoc_apid_${STRIPPED_TAG_NAME}_db
                hostname: ugcompsoc_apid_${STRIPPED_TAG_NAME}_db
                environment:
                  MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_ROOT_USERNAME }}
                  MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_ROOT_PASSWORD }}
                  MONGO_INITDB_DATABASE: ${{ secrets.MONGO_DATABASE_NAME }}
                restart: unless-stopped
                volumes:
                  - ./db_data:/data/db
                networks:
                  - private-ugcompsoc_apid_${STRIPPED_TAG_NAME}

            networks:
              transit-public:
                external: true
              private-ugcompsoc_apid_${STRIPPED_TAG_NAME}:
                external: false
            END

            tee apid.yml << END
            log_level: 'trace'
            timeouts:
              startup: 30s
              shutdown: 30s
            http:
              listen_address: ':8080'
              cors:
                allowed_origins: ['*']
            database:
              host: "mongodb://ugcompsoc_apid_${STRIPPED_TAG_NAME}_db"
              name: "${{ secrets.MONGO_DATABASE_NAME }}"
              username: "${{ secrets.MONGO_ROOT_USERNAME }}"
              password: "${{ secrets.MONGO_ROOT_PASSWORD }}"
            END

            docker compose up -d
